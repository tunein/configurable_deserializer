syntax = "proto3";

package tunein.kafka.messages;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message Playlist {
  string broadcast_group = 1;
  string broadcast = 2;
  string codec = 3;
  int64 bitrate = 4;
  int64 seqnum = 5;
  int64 schedule_item_id = 6;
  int64 playlist_len = 7;
  int64 discont_seqnum = 8;
  google.protobuf.Timestamp appended_at = 9;
  google.protobuf.Timestamp next_append_after = 10;
  string recording_id = 11;
  string content_hash = 12;
  string seg_uri = 13;
  google.protobuf.Timestamp seg_start_time = 14;
  int64 seg_seqnum = 15;
  google.protobuf.Duration seg_duration = 16;
  int64 seg_size = 17;
  google.protobuf.Timestamp seg_inserted_at = 18;

  // save space for future common fields since they use fewer bytes.
  // optional fields that don't often appear can have higher number ids.
  bool seg_is_ad = 30;
  bool seg_is_injected = 31;
  google.protobuf.Duration ad_break_overrun = 32;
  string tags_raw = 33;
}

message PlaylistEntriesWrapper {
  AnyPlaylistWrapper playlists = 5;
}

message PlaylistEntries {
   repeated Playlist playlists = 1;
}

message AnyPlaylistWrapper {
  string type_url = 1;

  // Must be a valid serialized protocol buffer of the above specified type.
  PlaylistEntries value = 2;
}

message PlaylistEvent {
  // unique identifier for the Event.  Must be unique for the source but
  // preferably completely unique (eg: uuid4)
  string id = 1;

  // An optional class for the type of event, potentially for use by
  // event delivery protocol.  May be empty.
  string class = 2;

  // Timestamp to associate with the event
  google.protobuf.Timestamp timestamp = 3;

  // Describe the source of the event, including any return communication
  // channel - host/port, topic/bucket, etc
  EventSource source = 4;

  // A protobuf message encoded as Any which contains the details of the 
  // event. If working with a message for which there is no descriptor, 
  // message may be encoded as a TypedStruct message encoded as Any.
  // https://github.com/cncf/udpa/blob/master/udpa/type/v1/typed_struct.proto
  AnyPlaylist details = 5;
}

message AnyPlaylist {
  // A URL/resource name that uniquely identifies the type of the serialized
  // protocol buffer message. This string must contain at least
  // one "/" character. The last segment of the URL's path must represent
  // the fully qualified name of the type (as in
  // `path/google.protobuf.Duration`). The name should be in a canonical form
  // (e.g., leading "." is not accepted).
  //
  // In practice, teams usually precompile into the binary all types that they
  // expect it to use in the context of Any. However, for URLs which use the
  // scheme `http`, `https`, or no scheme, one can optionally set up a type
  // server that maps type URLs to message definitions as follows:
  //
  // * If no scheme is provided, `https` is assumed.
  // * An HTTP GET on the URL must yield a [google.protobuf.Type][]
  //   value in binary format, or produce an error.
  // * Applications are allowed to cache lookup results based on the
  //   URL, or have them precompiled into a binary to avoid any
  //   lookup. Therefore, binary compatibility needs to be preserved
  //   on changes to types. (Use versioned type names to manage
  //   breaking changes.)
  //
  // Note: this functionality is not currently available in the official
  // protobuf release, and it is not used for type URLs beginning with
  // type.googleapis.com. As of May 2023, there are no widely used type server
  // implementations and no plans to implement one.
  //
  // Schemes other than `http`, `https` (or the empty scheme) might be
  // used with implementation specific semantics.
  //
  string type_url = 1;

  // Must be a valid serialized protocol buffer of the above specified type.
  PlaylistEntriesWrapper value = 2;
}

message EventSource {
  enum Process {
    UNKNOWN = 0;
    COORDINATOR = 1;
    TRANSCODER = 2;
    APPENDER = 3;
    PLAYLIST = 4;
    SHOCKWAVE = 5;
    SPORTS_INGEST = 6;
    NEWSFREE_INGEST = 7;
    AD_MONITOR = 8;
  }
  // The process type which generated the event
  Process process = 1;

  // A specific instance identifier for the process
  string instance = 2;

  // optional additional information about the event source, encoded as string
  string extra = 3;

  // An optional return channel, should an event consumer wish to respond to 
  // this event
  oneof return_channel {
   RestReturn rest_return = 4;
   KafkaReturn kafka_return = 5;
  }
}

message RestReturn {
  string url = 1;
}

message KafkaReturn {
  string topic = 1;
  string bucket = 2;
}